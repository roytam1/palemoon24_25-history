# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.


DEPTH = @DEPTH@
topsrcdir = @top_srcdir@
srcdir = @srcdir@
VPATH = @srcdir@

include $(DEPTH)/config/autoconf.mk

DEFINES += -DHAVE_CONFIG_H=vpx_config.h

MSVC_ENABLE_PGO := 1
FORCE_STATIC_LIB= 1
ifeq (WINNT,$(OS_TARGET))
VISIBILITY_FLAGS =
endif

LOCAL_INCLUDES += \
  -I. \
  -I$(topsrcdir)/media/libvpx \
  -I$(topsrcdir)/media/libvpx/vp8/ \
  -I$(topsrcdir)/media/libvpx/vp8/common/ \
  -I$(topsrcdir)/media/libvpx/vp8/common/arm \
  -I$(topsrcdir)/media/libvpx/vp8/common/x86 \
  -I$(topsrcdir)/media/libvpx/vp8/decoder \
  -I$(topsrcdir)/media/libvpx/vp8/decoder/arm \
  -I$(topsrcdir)/media/libvpx/vp8/decoder/x86 \
  -I$(topsrcdir)/media/libvpx/vp9/ \
  -I$(topsrcdir)/media/libvpx/vp9/common/ \
  -I$(topsrcdir)/media/libvpx/vp9/common/arm \
  -I$(topsrcdir)/media/libvpx/vp9/common/x86 \
  -I$(topsrcdir)/media/libvpx/vp9/decoder/ \
  -I$(topsrcdir)/media/libvpx/vpx_codec \
  -I$(topsrcdir)/media/libvpx/vpx_mem/ \
  -I$(topsrcdir)/media/libvpx/vpx_mem/include \
  -I$(topsrcdir)/media/libvpx/vpx_ports/ \
  -I$(topsrcdir)/media/libvpx/vpx_scale/ \
  $(NULL)

VPATH += \
  $(srcdir)/build/make \
  $(srcdir)/vpx \
  $(srcdir)/vpx/src \
  $(srcdir)/vpx_mem \
  $(srcdir)/vpx_mem/include \
  $(srcdir)/vpx_ports \
  $(srcdir)/vpx_scale \
  $(srcdir)/vpx_scale/arm \
  $(srcdir)/vpx_scale/arm/neon \
  $(srcdir)/vpx_scale/generic \
  $(srcdir)/vp8 \
  $(srcdir)/vp8/common \
  $(srcdir)/vp8/common/arm \
  $(srcdir)/vp8/common/arm/armv6 \
  $(srcdir)/vp8/common/arm/neon \
  $(srcdir)/vp8/common/generic \
  $(srcdir)/vp8/common/x86 \
  $(srcdir)/vp8/decoder \
  $(srcdir)/vp8/decoder/arm \
  $(srcdir)/vp8/decoder/arm/armv6 \
  $(srcdir)/vp8/decoder/arm/neon \
  $(srcdir)/vp8/decoder/generic \
  $(srcdir)/vp8/decoder/x86 \
  $(srcdir)/vp9 \
  $(srcdir)/vp9/common \
  $(srcdir)/vp9/common/arm \
  $(srcdir)/vp9/common/arm/neon \
  $(srcdir)/vp9/common/generic \
  $(srcdir)/vp9/common/x86 \
  $(srcdir)/vp9/decoder \
  $(NULL)

#Setup the libvpx assembler config.
AS=$(VPX_AS)
ASFLAGS=$(VPX_ASFLAGS) -I. -I$(topsrcdir)/media/libvpx/ -I$(topsrcdir)/media/libvpx/vpx_ports/
AS_DASH_C_FLAG=$(VPX_DASH_C_FLAG)
ASM_SUFFIX=$(VPX_ASM_SUFFIX)

CSRCS += \
  alloccommon.c \
  blockd.c \
  debugmodes.c \
  dequantize.c \
  entropy.c \
  entropymode.c \
  entropymv.c \
  extend.c \
  filter.c \
  findnearmv.c \
  systemdependent.c \
  idct_blk.c \
  idctllm.c \
  loopfilter.c \
  loopfilter_filters.c \
  mbpitch.c \
  modecont.c \
  quant_common.c \
  reconinter.c \
  reconintra.c \
  reconintra4x4.c \
  rtcd.c \
  sad_c.c \
  setupintrarecon.c \
  swapyv12buffer.c \
  treecoder.c \
  variance_c.c \
  dboolhuff.c \
  decodemv.c \
  decodframe.c \
  detokenize.c \
  onyxd_if.c \
  threading.c \
  vp8_dx_iface.c \
  vp9_systemdependent.c \
  vp9_alloccommon.c \
  vp9_common_data.c \
  vp9_convolve.c \
  vp9_debugmodes.c \
  vp9_entropy.c \
  vp9_entropymode.c \
  vp9_entropymv.c \
  vp9_extend.c \
  vp9_filter.c \
  vp9_findnearmv.c \
  vp9_idct.c \
  vp9_loopfilter.c \
  vp9_loopfilter_filters.c \
  vp9_mvref_common.c \
  vp9_pred_common.c \
  vp9_quant_common.c \
  vp9_reconinter.c \
  vp9_reconintra.c \
  vp9_rtcd.c \
  vp9_scale.c \
  vp9_scan.c \
  vp9_seg_common.c \
  vp9_tile_common.c \
  vp9_treecoder.c \
  vp9_dboolhuff.c \
  vp9_decodemv.c \
  vp9_decodframe.c \
  vp9_detokenize.c \
  vp9_dsubexp.c \
  vp9_onyxd_if.c \
  vp9_thread.c \
  vp9_dx_iface.c \
  vpx_codec.c \
  vpx_decoder.c \
  vpx_encoder.c \
  vpx_image.c \
  vpx_mem.c \
  gen_scalers.c \
  vpx_scale.c \
  yv12config.c \
  yv12extend.c \
  vpx_scale_rtcd.c \
  $(NULL)

ifdef MOZ_VP8_ERROR_CONCEALMENT
CSRCS += \
  error_concealment.c \
  $(NULL)
endif

ifdef MOZ_VP8_ENCODER
VPATH += \
  $(srcdir)/vp8/encoder \
  $(srcdir)/vp8/encoder/arm \
  $(srcdir)/vp8/encoder/arm/armv5te \
  $(srcdir)/vp8/encoder/arm/armv6 \
  $(srcdir)/vp8/encoder/arm/neon \
  $(srcdir)/vp8/encoder/generic \
  $(srcdir)/vp8/encoder/x86 \
  $(srcdir)/vp9/encoder \
  $(srcdir)/vp9/encoder/x86 \
  $(srcdir)/vpx_scale/arm \
  $(srcdir)/vpx_scale/arm/neon \
  $(NULL)

CSRCS += \
  bitstream.c \
  dct.c \
  denoising.c \
  encodeframe.c \
  encodeintra.c \
  encodemb.c \
  encodemv.c \
  ethreading.c \
  firstpass.c \
  lookahead.c \
  mcomp.c \
  modecosts.c \
  mr_dissim.c \
  onyx_if.c \
  pickinter.c \
  picklpf.c \
  psnr.c \
  quantize.c \
  ratectrl.c \
  rdopt.c \
  segmentation.c \
  temporal_filter.c \
  tokenize.c \
  treewriter.c \
  vp8_cx_iface.c \
  vp9_bitstream.c \
  vp9_boolhuff.c \
  vp9_dct.c \
  vp9_encodeframe.c \
  vp9_encodeintra.c \
  vp9_encodemb.c \
  vp9_encodemv.c \
  vp9_firstpass.c \
  vp9_lookahead.c \
  vp9_mbgraph.c \
  vp9_mcomp.c \
  vp9_modecosts.c \
  vp9_onyx_if.c \
  vp9_picklpf.c \
  vp9_psnr.c \
  vp9_quantize.c \
  vp9_ratectrl.c \
  vp9_rdopt.c \
  vp9_sad_c.c \
  vp9_segmentation.c \
  vp9_subexp.c \
  vp9_temporal_filter.c \
  vp9_tokenize.c \
  vp9_treewriter.c \
  vp9_vaq.c \
  vp9_variance_c.c \
  vp9_cx_iface.c \
  svc_encodeframe.c \
  $(NULL)
endif

ifdef VPX_X86_ASM
# Building on an x86 platform with a supported assembler, include
# the optimized assembly in the build.

# XXX {Progress Placeholder}

ifdef VPX_ARM_ASM
# Building on an ARM platform with a supported assembler, include
# the optimized assembly in the build.

ifeq ($(OS_TARGET),Android)
# For cpu-features.h
LOCAL_INCLUDES += -I$(ANDROID_NDK)/sources/android/cpufeatures
ifndef MOZ_WEBRTC
# For cpu-features.c
VPATH += $(ANDROID_NDK)/sources/android/cpufeatures
CSRCS += cpu-features.c
endif
endif

ASM_OFFSETS = vpx_scale_asm_offsets.asm
ifdef MOZ_VP8_ENCODER
ASM_OFFSETS += vp8_asm_enc_offsets.asm
endif


ifdef VPX_AS_CONVERSION
# The ARM asm is written in ARM RVCT syntax, but we actually build it with
# gas using GNU syntax. Add some rules to perform the conversion.

GENERATED_DIRS += $(dir $(ASFILES))

%.asm.$(ASM_SUFFIX): %.asm $(ASM_OFFSETS)
	$(VPX_AS_CONVERSION) < $< > $@

endif
endif

ifdef VPX_NEED_OBJ_INT_EXTRACT

# We don't have a compiler that supports a compatible inline asm syntax, so we
# have to resort to extracting asm offsets from a compiled object. This only
# works if we have the appropriate system headers obj_int_extract needs to
# parse that format, and so only has limited support for cross-compilation.

ifdef VPX_ARM_ASM
VPX_OIE_FORMAT := rvds
else
VPX_OIE_FORMAT := gas
endif

GARBAGE += vpx_scale_asm_offsets.$(OBJ_SUFFIX) vpx_scale_asm_offsets.asm

ifdef MOZ_VP8_ENCODER

GARBAGE += vp8_asm_enc_offsets.$(OBJ_SUFFIX) vp8_asm_enc_offsets.asm
endif

else

# We can extract the asm offsets directly from generated assembly using inline
# asm. This is the preferred method.

vpx_scale_asm_offsets.s: CFLAGS += -DINLINE_ASM

OFFSET_PATTERN := '^[a-zA-Z0-9_]* EQU'

# This rule, as well as the rule for vp8_asm_enc_offsets.s further below are here
# because the generic rule in rules.mk was made to not be implicit, and we
# can't put the C files in CSRCS.
vpx_scale_asm_offsets.s: $(srcdir)/vpx_scale/vpx_scale_asm_offsets.c
	$(REPORT_BUILD)
	$(CC) -S $(COMPILE_CFLAGS) $(TARGET_LOCAL_INCLUDES) $(_VPATH_SRCS)

vpx_scale_asm_offsets.asm: vpx_scale_asm_offsets.s
	grep $(OFFSET_PATTERN) $< | sed -e 's/[$$\#]//g' \
	    $(if $(VPX_AS_CONVERSION),| $(VPX_AS_CONVERSION)) > $@

GARBAGE += vpx_scale_asm_offsets.s vpx_scale_asm_offsets.asm

ifdef MOZ_VP8_ENCODER

vp8_asm_enc_offsets.s: CFLAGS += -DINLINE_ASM

vp8_asm_enc_offsets.s: $(srcdir)/vp8/encoder/vp8_asm_enc_offsets.c
	$(REPORT_BUILD)
	$(CC) -S $(COMPILE_CFLAGS) $(TARGET_LOCAL_INCLUDES) $(_VPATH_SRCS)

vp8_asm_enc_offsets.asm: vp8_asm_enc_offsets.s
	grep $(OFFSET_PATTERN) $< | sed -e 's/[$$\#]//g' \
	    $(if $(VPX_AS_CONVERSION),| $(VPX_AS_CONVERSION)) > $@

GARBAGE += vp8_asm_enc_offsets.s vp8_asm_enc_offsets.asm


endif

endif

EXTRA_MDDEPEND_FILES = vp8_asm_enc_offsets.s.pp vp8_asm_enc_offsets.$(OBJ_SUFFIX).pp vpx_scale_asm_offsets.s.pp vpx_scale_asm_offsets.$(OBJ_SUFFIX).pp

include $(topsrcdir)/config/rules.mk

# This must be after rules.mk in order to use $(OBJ_SUFFIX) outside a
# recursively-expanded variable.

# dont add for MSVC
ifndef _MSC_VER
%_sse2.$(OBJ_SUFFIX): CFLAGS += -msse2
%_ssse3.$(OBJ_SUFFIX): CFLAGS += -mssse3
%_avx2.$(OBJ_SUFFIX): CFLAGS += -mavx2
endif

quantize_sse4.$(OBJ_SUFFIX): vp8_asm_enc_offsets.asm
quantize_ssse3.$(OBJ_SUFFIX): vp8_asm_enc_offsets.asm

ifdef VPX_NEED_OBJ_INT_EXTRACT

# only for MSVC
ifdef _MSC_VER
NO_PROFILE_GUIDED_OPTIMIZE := vpx_scale_asm_offsets.c
endif

vpx_scale_asm_offsets.asm: vpx_scale_asm_offsets.$(OBJ_SUFFIX) $(HOST_PROGRAM)
	./$(HOST_PROGRAM) $(VPX_OIE_FORMAT) $< \
	    $(if $(VPX_AS_CONVERSION),| $(VPX_AS_CONVERSION)) > $@

# Filter out this object, because we don't want to link against it.
# It was generated solely so it could be parsed by obj_int_extract.
OBJS := $(filter-out vpx_scale_asm_offsets.$(OBJ_SUFFIX),$(OBJS))

ifdef MOZ_VP8_ENCODER

ifdef _MSC_VER
NO_PROFILE_GUIDED_OPTIMIZE += vp8_asm_enc_offsets.c
endif

vp8_asm_enc_offsets.asm: vp8_asm_enc_offsets.$(OBJ_SUFFIX) $(HOST_PROGRAM)
	./$(HOST_PROGRAM) $(VPX_OIE_FORMAT) $< \
	    $(if $(VPX_AS_CONVERSION),| $(VPX_AS_CONVERSION)) > $@

# Filter out this object, because we don't want to link against it.
# It was generated solely so it could be parsed by obj_int_extract.
OBJS := $(filter-out vp8_asm_enc_offsets.$(OBJ_SUFFIX),$(OBJS))

endif
endif

# Workaround a bug of Sun Studio (CR 6963410)
ifdef SOLARIS_SUNPRO_CC
ifeq (86,$(findstring 86,$(OS_TEST)))
filter.o: filter.c Makefile.in
	$(REPORT_BUILD)
	@$(MAKE_DEPS_AUTO_CC)
	$(CC) -o $@ -c $(patsubst -xO[45],-xO3,$(COMPILE_CFLAGS)) $<
endif
endif
